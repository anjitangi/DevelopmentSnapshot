# -*- coding: utf-8 -*-
"""Break-Even Plot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1laUTyYbwjKxY8Sd7NJakQ54c4zRqzftm
"""

#pip install dash==2.11.1  plotly==5.15.0

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objects as go
import numpy as np

# 1. We'll bring in a Bootstrap CSS for a cleaner, modern look:
external_stylesheets = [
    "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
]

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

# -- Constants --
PLATFORM_FEE = 26400  # Charged every 2 years
DEFAULT_NUM_YEARS = 5

def parse_yearly_input(input_str, default_years=5):
    """
    Parse a comma-separated string of integers into a list of length `default_years`.
    Example: "3,4,5,2,1" -> [3, 4, 5, 2, 1].
    If user provides fewer or more entries than default_years, we pad or truncate.
    """
    if not input_str:
        return [0]*default_years

    parts = [x.strip() for x in input_str.split(',')]
    values = []
    for part in parts:
        try:
            values.append(int(part))
        except ValueError:
            # If parsing fails, default to 0 for that entry
            values.append(0)

    # Adjust length to exactly `default_years`
    if len(values) < default_years:
        values += [0]*(default_years - len(values))
    elif len(values) > default_years:
        values = values[:default_years]

    return values

app.layout = html.Div(className="container mt-4", children=[
    html.H1("Multi-Year Break-Even Analysis", className="mb-4"),

    # Instructions
    html.P("Enter the average donation amounts, yearly unit distributions for each product, "
           "and the number of years to model. The platform fee is charged in years 2, 4, 6, etc."
           " Any leftover from prior years can offset subsequent costs."),

    # -- Parameter Inputs --
    html.Div(className="row mb-3", children=[
        html.Div(className="col-md-4", children=[
            html.Label("Avg. DAF Donation ($)", className="form-label fw-bold"),
            dcc.Input(
                id='avg_daf', type='number', value=5000,
                className="form-control", style={'width': '100%'}
            ),
        ]),
        html.Div(className="col-md-4", children=[
            html.Label("Avg. Stock Donation ($)", className="form-label fw-bold"),
            dcc.Input(
                id='avg_stock', type='number', value=10000,
                className="form-control", style={'width': '100%'}
            ),
        ]),
        html.Div(className="col-md-4", children=[
            html.Label("Avg. Bequest Donation ($)", className="form-label fw-bold"),
            dcc.Input(
                id='avg_bequest', type='number', value=20000,
                className="form-control", style={'width': '100%'}
            ),
        ]),
    ]),

    html.Div(className="row mb-3", children=[
        html.Div(className="col-md-4", children=[
            html.Label("DAF Units per Year (comma separated)", className="form-label fw-bold"),
            dcc.Input(
                id='daf_yearly_distribution', type='text',
                value="2,2,2,2,2",  # default
                className="form-control"
            ),
        ]),
        html.Div(className="col-md-4", children=[
            html.Label("Stock Units per Year (comma separated)", className="form-label fw-bold"),
            dcc.Input(
                id='stock_yearly_distribution', type='text',
                value="1,1,1,1,1",  # default
                className="form-control"
            ),
        ]),
        html.Div(className="col-md-4", children=[
            html.Label("Bequest Units per Year (comma separated)", className="form-label fw-bold"),
            dcc.Input(
                id='bequest_yearly_distribution', type='text',
                value="0,1,0,1,0",  # default
                className="form-control"
            ),
        ]),
    ]),

    html.Div(className="row mb-3", children=[
        html.Div(className="col-md-6", children=[
            html.Label("Effective Contribution Multiplier", className="form-label fw-bold"),
            dcc.Input(
                id='effective_contribution', type='number', value=1.0,
                className="form-control", style={'width': '100%'}
            ),
            html.Small("Multiplier applied to the donation amounts (e.g. 0.8 for 80% net).", className="text-muted"),
        ]),
        html.Div(className="col-md-6", children=[
            html.Label("Number of Years to Model", className="form-label fw-bold"),
            dcc.Input(
                id='num_years', type='number', value=5,
                className="form-control", style={'width': '100%'}
            ),
            html.Small("Example: 5 or 10 years, etc.", className="text-muted"),
        ]),
    ]),

    # -- Graph --
    html.Div(className="mb-3", children=[
        dcc.Graph(id='break_even_graph', style={'width': '100%', 'height': '600px'}),
    ]),

    html.Hr(),

    html.P("Copyright Â© 2025 - Omega Institute. All rights reserved.")
])


@app.callback(
    Output('break_even_graph', 'figure'),
    [
        Input('avg_daf', 'value'),
        Input('avg_stock', 'value'),
        Input('avg_bequest', 'value'),
        Input('daf_yearly_distribution', 'value'),
        Input('stock_yearly_distribution', 'value'),
        Input('bequest_yearly_distribution', 'value'),
        Input('effective_contribution', 'value'),
        Input('num_years', 'value'),
    ]
)
def update_multi_year_plot(avg_daf, avg_stock, avg_bequest,
                           daf_yearly_str, stock_yearly_str, bequest_yearly_str,
                           eff_contribution, num_years):
    """
    Multi-year break-even analysis where:
      - The platform fee (26,400) is charged in years 2,4,6,... (i.e. when year % 2 == 0).
      - Leftover from previous years can offset future costs.
      - DAF/Stock/Bequest units are specified per year via comma-separated inputs.
    """
    # 1) Validate num_years
    if not num_years or num_years <= 0:
        num_years = DEFAULT_NUM_YEARS

    # 2) Parse the yearly distributions
    daf_units = parse_yearly_input(daf_yearly_str, default_years=num_years)
    stock_units = parse_yearly_input(stock_yearly_str, default_years=num_years)
    bequest_units = parse_yearly_input(bequest_yearly_str, default_years=num_years)

    # Set up arrays for plotting
    year_list = np.arange(1, num_years + 1)
    cost_list = []
    revenue_list = []
    leftover_list = []

    cumulative_leftover = 0.0

    for i, year in enumerate(year_list):
        # -- Determine the cost for this year --
        # We'll charge the platform fee if (year % 2 == 0).
        # So year=2 => cost=26400, year=4 => cost=26400, etc.
        # Year=1 => cost=0, year=3 => cost=0, year=5 => cost=0, ...
        if year % 2 == 0:
            base_cost = PLATFORM_FEE
        else:
            base_cost = 0

        # -- Offset cost by leftover --
        if cumulative_leftover > 0:
            if cumulative_leftover >= base_cost:
                # leftover fully covers the cost
                leftover_after_cost = cumulative_leftover - base_cost
                this_year_cost = 0
                cumulative_leftover = leftover_after_cost
            else:
                # partial coverage
                this_year_cost = base_cost - cumulative_leftover
                cumulative_leftover = 0
        else:
            # no leftover
            this_year_cost = base_cost

        # -- Compute this year's revenue --
        this_year_daf = daf_units[i] if i < len(daf_units) else 0
        this_year_stock = stock_units[i] if i < len(stock_units) else 0
        this_year_bequest = bequest_units[i] if i < len(bequest_units) else 0

        this_year_revenue = (
            (this_year_daf     * (avg_daf or 0)) +
            (this_year_stock   * (avg_stock or 0)) +
            (this_year_bequest * (avg_bequest or 0))
        ) * (eff_contribution or 1)

        # -- Update leftover --
        net_this_year = this_year_revenue - this_year_cost
        cumulative_leftover += net_this_year

        cost_list.append(this_year_cost)
        revenue_list.append(this_year_revenue)
        leftover_list.append(cumulative_leftover)

    # -- Prepare the figure --
    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=year_list,
        y=cost_list,
        mode='lines+markers',
        name='Cost (after Leftover Offset)',
        line=dict(color='firebrick', width=3),
        marker=dict(size=8)
    ))

    fig.add_trace(go.Scatter(
        x=year_list,
        y=revenue_list,
        mode='lines+markers',
        name='Yearly Donation Revenue',
        line=dict(color='royalblue', width=3),
        marker=dict(size=8)
    ))

    fig.add_trace(go.Scatter(
        x=year_list,
        y=leftover_list,
        mode='lines+markers',
        name='Cumulative Leftover',
        line=dict(color='green', width=3),
        marker=dict(size=8)
    ))

    fig.update_layout(
        title=f"{num_years}-Year Projection: Platform Fee at Years 2,4,6,...",
        xaxis_title="Year",
        yaxis_title="Amount (USD)",
        template="plotly_white",
        hovermode="x unified",
        legend=dict(
            orientation="h",
            yanchor="bottom", y=1.02,
            xanchor="right", x=1
        ),
        margin=dict(l=40, r=40, t=80, b=40),
    )

    return fig


if __name__ == "__main__":
    app.run_server(debug=True)